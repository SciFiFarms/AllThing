version: '3.5'
services:
  docs:
    command: jekyll serve
    deploy:
        mode: global
        restart_policy:
          condition: any
    image: ${image_provider}/technocore-docs:${TAG}
    networks:
      - web
    ports:
      - "4000:4000"
      - 35729:35729
    secrets:
      - source: docs_cert_bundle
        target: wiki_cert
      - source: docs_key
        target: wiki_key
      - source: ca
        target: ca
    volumes:
      - ${docs_live_mount}
  esphomeyaml:
    depends_on:
      - mqtt
    deploy:
        mode: global
        restart_policy:
          condition: any
    environment:
      - image_provider=${image_provider}
      - stack_name=${stack_name}
      - service_name=esphomeyaml
      - TAG=${TAG}
      # This is used to allow the wrapper to mount the /config folder to the correct place on the host.
      - host_working_dir=$PWD
      - esphome_core=./esphome-core:/esphome-core
    image: ${image_provider}/technocore-esphomeyaml-wrapper:${TAG}
    networks:
      - web
    secrets:
      - source: ca_bundle
        target: ca
      - source: esphomeyaml_mqtt_username
        target: mqtt_username
      - source: esphomeyaml_mqtt_password
        target: mqtt_password
      - source: esphomeyaml_token
        target: token
      - source: home_assistant_domain
        target: domain
    user: "0" # I suspect I'll be able to remove this. I'd like to do that. 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${esphomeyaml_live_mount}
      - ./esphome-core:/esphome-core
  home_assistant:
    depends_on:
      - home_assistant_db
      - mqtt
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: any
    environment:
      - DOCKER_HOSTNAME=${HOSTNAME}
    image: ${image_provider}/technocore-home-assistant:${TAG}
    networks:
      web:
        # This was nessesary in order to get Node-RED to connect with Home Assistant.
        aliases:
          - home_assistant.local
          - home_assistant.scifi.farm
    ports:
      - "8123:8123"
      - "5678:5678"
    secrets:
      - source: home_assistant_cert_bundle
        target: cert
      - source: home_assistant_key
        target: key
        mode: 0400
      - source: ca_bundle
        target: ca
      - source: home_assistant_mqtt_username
        target: mqtt_username
      - source: home_assistant_mqtt_password
        target: mqtt_password
      - source: home_assistant_domain
        target: domain
    # TODO: Currently, Home Assistant runs as root. Need to figure out how to run Home Assistant as a user while being hosted on a server.
    #user: ${UID}
    volumes:
      # Might need to change from "/config/.storage" to "/config". 
      # "/config/.storage" is where the users are kept, but we might want to save
      # changes made to the /config/ dir too. 
      - home-assistant:/config/.storage/
      # This allows for realtime editing of Home Assistant configs and scripts. 
      - ${home_assistant_config_live_mount}
      - ${home_assistant_src_live_mount}
  home_assistant_db:
    depends_on:
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: ${image_provider}/technocore-home-assistant-db:${TAG}
    networks:
      - web
    secrets:
      - source: home_assistant_db_cert_bundle
        target: cert
        uid: "999" # This is set in Postgres' Dockerfile
        mode: 0400
      - source: home_assistant_db_key
        target: key
        uid: "999" # This is set in Postgres' Dockerfile
        mode: 0400
      - source: ca
        target: ca
    user: postgres 
    volumes:
      - home-assistant-db:/var/lib/postgresql/data
      - ${home_assistant_db_live_mount}
  mqtt:
    depends_on:
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: ${image_provider}/technocore-vernemq:${TAG}
    networks:
      web:
        aliases:
          - mqtt.local
          - mqtt.scifi.farm
    # For some reason, the vmq-admin tool stops working if ANY port is set. 
    # Fortunately, I was able to use NGINX to do the port forwarding instead.
    # See https://github.com/SciFiFarms/TechnoCore-VerneMQ/pull/4 for more.
    #ports:
    #  - "8883:8883"
    #  - "1883:1883"
    secrets:
      - source: mqtt_mqtt_username
        target: mqtt_username
      - source: mqtt_mqtt_password
        target: mqtt_password
      - source: mqtt_cert_bundle
        target: mqtt_cert
      - source: mqtt_key
        target: mqtt_key
      - source: ca_bundle
        target: ca
      - source: mqtt_token
        target: token
      - source: portainer_mqtt_username
        target: portainer_mqtt_username
      - source: portainer_mqtt_password
        target: portainer_mqtt_password
    volumes:
      - mqtt:/vernemq/etc 
      # Used for working with migrations.
      - ${mqtt_live_mount}
    # Hostname is needed to persist data. 
    hostname: mqtt
  nginx:
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: ${image_provider}/technocore-nginx:${TAG}
    networks:
      - web
    ports:
      - "8883:8883"
      - "1883:1883"
      - "80:80"
      - "443:443"
      - "6052:6052"
    secrets:
      - source: nginx_cert_bundle
        target: cert_bundle
      - source: nginx_key
        target: key
      - source: ca_bundle
        target: ca
    volumes:
      - ${nginx_config_folder_live_mount}
      - ${nginx_config_file_live_mount}
  node_red:
    environment:
      # Needed to be able to connect with Home Assistant
      - NODE_EXTRA_CA_CERTS=/run/secrets/ca
    depends_on:
      - home_assistant
      - mqtt
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: ${image_provider}/technocore-node-red:${TAG}
    networks:
      - web
    ports:
      - "1880:1880"
      # Used for debugging. Simply add "--inspect" to the "start" object in /usr/src/node-red/package.json
      # Should be doable via env var: https://nodejs.org/api/cli.html#cli_node_options
      - "9229:9229"
    secrets:
      - source: node_red_cert_bundle
        target: cert
      - source: node_red_key
        target: key
      - source: ca_bundle
        target: ca
      - source: node_red_mqtt_username
        target: mqtt_username
      - source: node_red_mqtt_password
        target: mqtt_password
    user: "0" #${UID}
    volumes:
      - node-red:/data
      # If you docker cp [container hash]:/usr/src/node-red nr/src/
      # You can work with live running code by uncommenting the following volume>
      #- "./node-red:/usr/src/node-red"
  portainer:
    environment:
      - acme_flags=${acme_flags}
      - stackname=${stack_name}
      - stack_name=${stack_name}
      - image_provider=${image_provider}
      # Tempaltes are cool: https://docs.docker.com/engine/swarm/services/#create-services-using-templates
      - DOCKER_HOSTNAME={{ .Node.Hostname }}
      - TAG=${TAG}
      - image_refresh_time=${image_refresh_time}
    depends_on:
      - mqtt
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: ${image_provider}/technocore-portainer:${TAG}
    networks:
      - web
    ports:
      - "9000:9000"
    secrets:
      - source: portainer_acme_env
        target: acme_env
      - source: portainer_cert_bundle
        target: cert
      - source: portainer_key
        target: key
      - source: ca_bundle
        target: ca
      - source: portainer_mqtt_username
        target: mqtt_username
      - source: portainer_mqtt_password
        target: mqtt_password
      - source: portainer_token
        target: token
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
      - portainer:/data
      - portainer-acme:/acme.sh/
      - ${portainer_live_mount}
  vault:
    deploy:
      mode: global
      restart_policy:
        condition: any
    environment:
      - SKIP_SETCAP=true
      - VAULT_ADDR=https://vault.local:8200
      # This has been disabled because I don't think they are needed... But not sure enough to remove yet.
      #- CONTAINER_HOSTNAME=vault
      - VAULT_CACERT=/run/secrets/ca
      # This has been disabled because I don't think they are needed... But not sure enough to remove yet.
      #- VAULT_CA=true
    image: ${image_provider}/technocore-vault:${TAG}
    networks:
      web:
        aliases:
          - vault.local
          - vault.scifi.farm
    secrets:
      - source: vault_key
        target: /run/secrets/vault_key
      - source: vault_cert_bundle
        target: /run/secrets/vault_cert
      - source: ca_bundle
        target: /run/secrets/ca
      - source: ca_bundle
        target: /etc/ssl/certs/ca-certificates.crt
      - source: vault_unseal
        target: /run/secrets/vault_unseal
      - source: vault_token
        target: /run/secrets/vault_token
    ports:
      - "8200:8200"
    volumes:
      - vault:/vault/file
      - ${vault_live_mount}

networks:
  web:
    attachable: true
secrets:
  ca:
    name: ${stack_name}_ca
    external: true
  ca_bundle:
    name: ${stack_name}_ca_bundle
    external: true
  home_assistant_cert_bundle:
    name: ${stack_name}_home_assistant_cert_bundle
    external: true
  home_assistant_domain:
    name: ${stack_name}_home_assistant_domain
    external: true
  home_assistant_key:
    name: ${stack_name}_home_assistant_key
    external: true
  home_assistant_mqtt_username:
    name: ${stack_name}_home_assistant_mqtt_username
    external: true
  home_assistant_mqtt_password:
    name: ${stack_name}_home_assistant_mqtt_password
    external: true
  home_assistant_db_cert_bundle:
    name: ${stack_name}_home_assistant_db_cert_bundle
    external: true
  home_assistant_db_key:
    name: ${stack_name}_home_assistant_db_key
    external: true
  mqtt_cert_bundle:
    name: ${stack_name}_mqtt_cert_bundle
    external: true
  mqtt_key:
    name: ${stack_name}_mqtt_key
    external: true
  mqtt_mqtt_username:
    name: ${stack_name}_mqtt_mqtt_username
    external: true
  mqtt_mqtt_password:
    name: ${stack_name}_mqtt_mqtt_password
    external: true
  mqtt_token:
    name: ${stack_name}_mqtt_token
    external: true
  node_red_cert_bundle:
    name: ${stack_name}_node_red_cert_bundle
    external: true
  node_red_key:
    name: ${stack_name}_node_red_key
    external: true
  nginx_cert_bundle:
    name: ${stack_name}_nginx_cert_bundle
    external: true
  nginx_key:
    name: ${stack_name}_nginx_key
    external: true
  esphomeyaml_mqtt_username:
    name: ${stack_name}_esphomeyaml_mqtt_username
    external: true
  esphomeyaml_mqtt_password:
    name: ${stack_name}_esphomeyaml_mqtt_password
    external: true
  esphomeyaml_token:
    name: ${stack_name}_esphomeyaml_token
    external: true
  portainer_acme_env:
    name: ${stack_name}_portainer_acme_env
    external: true
  portainer_cert_bundle:
    name: ${stack_name}_portainer_cert_bundle
    external: true
  portainer_key:
    name: ${stack_name}_portainer_key
    external: true
  portainer_mqtt_username:
    name: ${stack_name}_portainer_mqtt_username
    external: true
  portainer_mqtt_password:
    name: ${stack_name}_portainer_mqtt_password
    external: true
  portainer_token:
    name: ${stack_name}_portainer_token
    external: true
  node_red_mqtt_username:
    name: ${stack_name}_node_red_mqtt_username
    external: true
  node_red_mqtt_password:
    name: ${stack_name}_node_red_mqtt_password
    external: true
  vault_cert_bundle:
    name: ${stack_name}_vault_cert_bundle
    external: true
  vault_key:
    name: ${stack_name}_vault_key
    external: true
  vault_unseal:
    name: ${stack_name}_vault_unseal
    external: true
  vault_token:
    name: ${stack_name}_vault_token
    external: true
  docs_cert_bundle:
    name: ${stack_name}_docs_cert_bundle
    external: true
  docs_key:
    name: ${stack_name}_docs_key
    external: true
volumes:
  esphomeyaml:
  home-assistant:
  home-assistant-db:
  mqtt:
  node-red:
  portainer:
  portainer-acme:
  vault:
