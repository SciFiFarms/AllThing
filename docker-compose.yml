version: '3.5'
# Todo:
# Modify Vault entryscript to install tls certs if they don't exist. Also store unseal key as secret.
# Sort the lines.
# Clean up work in the installer
# Install certs in mqtt
# Secure HA <-> EMQtt 
# Secure NR <-> EMQtt
# Install certs on devices -- Bleeds into config nicely.
# Secure devices <-> EMQtt
# Other misc security cleanup. 
#   Have postgres do full varification on clients, and visversa.
#   Have to restrict users in emqttt
#
# Figure out how to save setup in DB that can be migrated maybe?

services:
  vault:
    build:
      dockerfile: ${PWD}/vault/Dockerfile
      context: ./vault
      #args:
        #If Swarm mode doesn't support it, you can set SKIP_SETCAP to skip the setcap call (and disable mlock in your Vault configuration).
        # I think I can put the vault config here! 
    #cap_add:
    #  - IPC_LOCK
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    image: althing/vault
    networks:
      - web
    #secrets:
      #Yep, they go here. 
    volumes:
      - vault:/vault/file
      - /usr/bin/docker:/usr/bin/docker
  ha:
    build: 
      dockerfile: ${PWD}/ha/Dockerfile
      context: ./ha
      args:
        - userid=${UID}
        - username=docker
    depends_on:
      - vault
      - mqtt
      - ha_db
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    image: althing/ha
    networks:
      - web
    ports:
      - "8123:8123"
    secrets:
      - source: ha-cert
        uid: ${UID}
        mode: 0400
      - source: ha-key
        uid: ${UID}
        mode: 0400
      - ca
    user: ${UID}
    volumes:
      - ./ha/data/:/config 
      #- /etc/group:/etc/group:ro 
      #- /etc/passwd:/etc/passwd:ro
      #- /etc/localtime:/etc/localtime:ro
  ha_db:
    build:
      dockerfile: ${PWD}/ha_db/Dockerfile
      context: ./ha_db
      args:
        - userid=${UID}
        - username=postgres
    depends_on:
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      - POSTGRES_DB=homeassistant
      - SSL_CERT_FILE=/run/secrets/ha_db-cert
      - SSL_KEY_FILE=/run/secrets/ha_db-key
      - SSL_CA_FILE=/run/secrets/ca
    image: althing/ha_db
    networks:
      - web
    #restart: always
    secrets:
      - source: ha_db-cert
        uid: ${UID}
        mode: 0400
      - source: ha_db-key
        uid: ${UID}
        mode: 0400
      - ca
    user: ${UID}
    volumes:
      - ./ha_db/data/:/var/lib/postgresql/data
  mqtt:
    depends_on:
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    image: emqttd-docker-v2.3-2.3.4
    networks:
      - web
    ports:
      - "1883:1883"
      - "8083-8084:8083-8084"
      - "8883:8883"
      - "18083:18083"
      - "4369"
#      - "6000-6999"
      - "8080"
  nr:
    depends_on:
      - ha
      - mqtt
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    image: nodered/node-red-docker 
    networks:
      - web
    ports:
      - "1880:1880"
    secrets:
      - source: nr-cert
        uid: ${UID}
        mode: 0600
      - source: nr-key
        uid: ${UID}
        mode: 0600
    user: ${UID}
    volumes:
      - "./nr/data:/data"
networks:
  web:
secrets:
  ca:
    file: ha/certs/ca.pem
  ha-cert:
    file: ha/certs/cert.pem
  ha-key:
    file: ha/certs/key.pem
  ha_db-cert:
    file: ha_db/certs/cert.pem
  ha_db-key:
    file: ha_db/certs/key.pem
  nr-cert:
    file: nr/certs/cert.pem
  nr-key:
    file: nr/certs/key.pem
  #mqtt-cert:
  #  file: imqtt/
volumes:
  vault:
# Can also use external per http://blog.scottlogic.com/2017/03/01/docker-secrets.html