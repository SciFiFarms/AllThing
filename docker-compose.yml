version: '3.5'

services:
  # Collects container metrics for Prometheus
 docs:
    deploy:
        mode: global
        restart_policy:
          condition: any
    environment:
      - HUGO_THEME=meghna-hugo
      - HUGO_WATCH=true
      # TODO: This should actually be set via a domain secret.
      - HUGO_BASEURL=${HOSTNAME}
    image: ${image_provider:-scififarms}/technocore-docs:${TAG:-latest}
    <<: *logging-defaults
    networks:
      - web
    secrets:
      - source: docs_cert_bundle
        target: wiki_cert
      - source: docs_key
        target: wiki_key
      - source: ca
        target: ca
    volumes:
      - ${docs_live_mount:-./empty/:/opt/.dummy}

  grocy:
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: linuxserver/grocy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Denver
    volumes:
      - grocy:/config
    ports:
      - 9283:80
      
  jupyter:
    depends_on:
      - home_assistant_db
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: ${image_provider:-scififarms}/technocore-jupyter:${TAG:-latest}
    <<: *logging-defaults
    networks:
      - web
    secrets:
      - source: jupyter_cert_bundle
        target: cert_bundle
        uid: "999" # This is set in Postgres' Dockerfile
        mode: 0400
      - source: jupyter_key
        target: key
        uid: "999" # This is set in Postgres' Dockerfile
        mode: 0400
      - source: ca
        target: ca
    volumes:
      - jupyter:/var/lib/jupyter

  node_red:
    environment:
      # Needed to be able to connect with Home Assistant
      - NODE_EXTRA_CA_CERTS=/run/secrets/ca
    depends_on:
      - home_assistant
      - mqtt
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: ${image_provider:-scififarms}/technocore-node-red:${TAG:-latest}
    <<: *logging-defaults
    networks:
      - web
    ports:
      - "1880:1880"
      # Used for debugging. Simply add "--inspect" to the "start" object in /usr/src/node-red/package.json
      # Should be doable via env var: https://nodejs.org/api/cli.html#cli_node_options
      - "9229:9229"
    secrets:
      - source: node_red_cert_bundle
        target: cert_bundle
      - source: node_red_key
        target: key
      - source: ca_bundle
        target: ca
      - source: node_red_mqtt_username
        target: mqtt_username
      - source: node_red_mqtt_password
        target: mqtt_password
    user: "0" #${UID}
    volumes:
      - node-red:/data
      # If you docker cp [container hash]:/usr/src/node-red nr/src/
      # You can work with live running code by uncommenting the following volume>
      #- "./node-red:/usr/src/node-red"

  portainer:
    environment:
      - acme_flags=${acme_flags:-""}
      - stackname=${stack_name:-technocore}
      - stack_name=${stack_name:-technocore}
      - image_provider=${image_provider:-scififarms}
      # Tempaltes are cool: https://docs.docker.com/engine/swarm/services/#create-services-using-templates
      - DOCKER_HOSTNAME={{ .Node.Hostname }}
      - TAG=${TAG:-latest}
      # 1 day = 86400 seconds
      - image_refresh_time=${image_refresh_time:-86400}
      - host_working_dir=$PWD
    depends_on:
      - mqtt
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: ${image_provider:-scififarms}/technocore-portainer:${TAG:-latest}
    <<: *logging-defaults
    networks:
      - web
    ports:
      - "9000:9000"
    secrets:
      - source: portainer_acme_env
        target: acme_env
      - source: portainer_cert_bundle
        target: cert
      - source: portainer_key
        target: key
      - source: ca_bundle
        target: ca
      - source: portainer_mqtt_username
        target: mqtt_username
      - source: portainer_mqtt_password
        target: mqtt_password
      - source: portainer_token
        target: token
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
      - ./:/var/run/technocore
      - portainer:/data
      - portainer-acme:/acme.sh/
      - ${portainer_live_mount:-./empty/:/opt/.dummy}
      - ${portainer_migrations_live_mount:-./empty/:/opt/.migrations_dummy}
  
  mariadb:
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: 'bitnami/mariadb:latest'
    environment:
      - MARIADB_USER=suitecrm
      - MARIADB_DATABASE=suitecrm
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - web
    volumes:
      - 'mariadb:/bitnami'
  
  suitecrm:
    deploy:
      mode: global
      restart_policy:
        condition: any
    image: 'bitnami/suitecrm:latest'
    environment:
      - MARIADB_HOST=mariadb
      - MARIADB_PORT_NUMBER=3306
      - SUITECRM_DATABASE_USER=suitecrm
      - SUITECRM_DATABASE_NAME=suitecrm
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - '8080:80'
      - '44380:443'
    networks:
      - web
    volumes:
      - 'suitecrm:/bitnami'
      

networks:
  web:
    attachable: true
secrets:
  ca:
    name: ${stack_name:-technocore}_ca
    external: true
  ca_bundle:
    name: ${stack_name:-technocore}_ca_bundle
    external: true
  esphome_mqtt_username:
    name: ${stack_name:-technocore}_esphome_mqtt_username
    external: true
  esphome_mqtt_password:
    name: ${stack_name:-technocore}_esphome_mqtt_password
    external: true
  esphome_token:
    name: ${stack_name:-technocore}_esphome_token
    external: true
  esphome_domain:
    name: ${stack_name:-technocore}_esphome_domain
    external: true

  jupyter_cert_bundle:
    name: ${stack_name:-technocore}_jupyter_cert_bundle
    external: true
  jupyter_key:
    name: ${stack_name:-technocore}_jupyter_key
    external: true
  loki_cert_bundle:
    name: ${stack_name:-technocore}_loki_cert_bundle
    external: true
  loki_key:
    name: ${stack_name:-technocore}_loki_key
    external: true
  node_red_cert_bundle:
    name: ${stack_name:-technocore}_node_red_cert_bundle
    external: true
  node_red_key:
    name: ${stack_name:-technocore}_node_red_key
    external: true
  node_red_mqtt_username:
    name: ${stack_name:-technocore}_node_red_mqtt_username
    external: true
  node_red_mqtt_password:
    name: ${stack_name:-technocore}_node_red_mqtt_password
    external: true
  portainer_acme_env:
    name: ${stack_name:-technocore}_portainer_acme_env
    external: true
  portainer_cert_bundle:
    name: ${stack_name:-technocore}_portainer_cert_bundle
    external: true
  portainer_key:
    name: ${stack_name:-technocore}_portainer_key
    external: true
  portainer_mqtt_username:
    name: ${stack_name:-technocore}_portainer_mqtt_username
    external: true
  portainer_mqtt_password:
    name: ${stack_name:-technocore}_portainer_mqtt_password
    external: true
  portainer_token:
    name: ${stack_name:-technocore}_portainer_token
    external: true
  health_cert_bundle:
    name: ${stack_name:-technocore}_health_cert_bundle
    external: true
  health_key:
    name: ${stack_name:-technocore}_health_key
    external: true
  health_domain:
    name: ${stack_name:-technocore}_health_domain
    external: true
  docs_cert_bundle:
    name: ${stack_name:-technocore}_docs_cert_bundle
    external: true
  docs_key:
    name: ${stack_name:-technocore}_docs_key
    external: true
volumes:
  esphome-build:
  grocy:
  loki:
  mariadb:
  node-red:
  portainer:
  portainer-acme:
  health:
  suitecrm:
