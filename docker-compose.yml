version: '3.5'
services:
  docs:
    command: jekyll serve
    deploy:
        mode: global
        restart_policy:
          condition: on-failure
    image: allthing/docs:${TAG}
    ports:
      - "4000:4000"
      - 35729:35729
    secrets:
      - source: althing_dev_docs_cert_bundle
        target: wiki_cert
      - source: althing_dev_docs_key
        target: wiki_key
      - source: althing_dev_ca
        target: ca
    volumes:
      # TODO: Make this built into the image when built. 
      - "../docs:/src"
  ha:
    # This is useful to skip the timeout.
    #entrypoint: "python -m homeassistant --config /config"
    depends_on:
      - vault
      - mqtt
      - ha_db
    deploy:
      # I'm usinsg replicas set to 1 instead of global because I can't seem to 
      # reboot the Home Assistant service consistantly. Setting replication to 
      # 0, then 1 seems to work though. 
      #mode: global
      replicas: 1
      restart_policy:
        condition: any
    image: allthing/home-assistant:${TAG}
    networks:
      web:
        # This was nessesary in order to get Node-RED to connect with Home Assistant.
        aliases:
          - ha.local
          - ha.scifi.farm
    ports:
      - "8123:8123"
    secrets:
      - source: althing_dev_ha_cert_bundle
        target: ha_cert
        uid: ${UID}
        mode: 0440
      - source: althing_dev_ha_key
        target: ha_key
        uid: ${UID}
        mode: 0400
      - source: althing_dev_ca_bundle
        target: ca
      - source: althing_dev_home_assistant_mqtt_username
        target: mqtt_username
      - source: althing_dev_home_assistant_mqtt_password
        target: mqtt_password
    # TODO: Currently, Home Assistant runs as root. Need to figure out how to run Home Assistant as a user while being hosted on a server.
    #user: ${UID}
    #volumes:
      # This allows for realtime editing of Home Assistant configs and scripts. 
      #- ../home-assistant/config/:/config
  ha_db:
    depends_on:
      - vault
    deploy:
      mode: global
      restart_policy:
        max_attempts: 20
    image: allthing/home-assistant-db:${TAG}
    networks:
      - web
    secrets:
      - source: althing_dev_ha_db_cert_bundle
        target: ha_db_cert
        uid: "999" # This is set in Postgres' Dockerfile
        mode: 0400
      - source: althing_dev_ha_db_key
        target: ha_db_key
        uid: "999" # This is set in Postgres' Dockerfile
        mode: 0400
      - source: althing_dev_ca
        target: ca
    user: postgres 
    volumes:
      - home-assistant-db:/var/lib/postgresql/data
      - home-assistant-db-migrations:/shell-migrations/logs/
  # I may use this at some point, but I'm going to try using Home Assistant first.
  #homie-ota:
  #  deploy:
  #    mode: global
  #  image: allthing/homie-ota
  #  #volumes:
  #    #- /home/pirate/firmwares:/app/firmwares
  #  ports:
  #    - "9080:9080"
  mqtt2:
    depends_on:
      - vault
      - portainer
    deploy:
      #mode: global
      replicas: 1
      #restart_policy:
      #  condition: -failure
    image: allthing/vernemq:${TAG}
    #networks:
    #  web:
    #    aliases:
    #      - mqtt.local
    #      - mqtt.scifi.farm
    ports:
    #  - "8883:8883"
      - "1883:1883"
    secrets:
      - source: althing_dev_mqtt_mqtt_username
        target: mqtt_username
      - source: althing_dev_mqtt_mqtt_password
        target: mqtt_password
      - source: althing_dev_mqtt_cert_bundle
        target: mqtt_cert
      - source: althing_dev_mqtt_key
        target: mqtt_key
      - source: althing_dev_ca_bundle
        target: ca
    volumes:
        #- "./mqtt/config/:/etc/rabbitmq/"
        - mqtt2:/etc/vernemq/
    # Hostname is needed to persist data. 
    hostname: mqtt
    #user: vernemq
  mqtt:
    depends_on:
      - vault
    deploy:
      #mode: global
      replicas: 1
      #restart_policy:
      #  condition: -failure
    image: allthing/rabbitmq:${TAG}
    networks:
      web:
        aliases:
          - mqtt.local
          - mqtt.scifi.farm
    ports:
      - "15672:15672"
      - "8883:8883"
    #  - "1883:1883"
    secrets:
      - source: althing_dev_mqtt_cert_bundle
        target: mqtt_cert
      - source: althing_dev_mqtt_key
        target: mqtt_key
      - source: althing_dev_ca_bundle
        target: ca
    volumes:
        #- "./mqtt/config/:/etc/rabbitmq/"
        - mqtt:/var/lib/rabbitmq/
    # Hostname is needed to persist data. 
    hostname: mqtt
  nr:
    environment:
      # Needed to be able to connect with Home Assistant
      - NODE_EXTRA_CA_CERTS=/run/secrets/ca
    depends_on:
      - ha
      - mqtt
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    image: allthing/node-red:${TAG}
    networks:
      - web
    ports:
      - "1880:1880"
      # Used for debugging. Simply add "--inspect" to the "start" object in /usr/src/node-red/package.json
      # Should be doable via env var: https://nodejs.org/api/cli.html#cli_node_options
      - "9229:9229"
    secrets:
      - source: althing_dev_nr_cert_bundle
        target: nr_cert
        uid: ${UID}
        mode: 0600
      - source: althing_dev_nr_key
        target: nr_key
        uid: ${UID}
        mode: 0600
      - source: althing_dev_ca_bundle
        target: ca
        uid: ${UID}
        mode: 0600
      - source: althing_dev_node_red_mqtt_username
        target: mqtt_username
        uid: ${UID}
        mode: 0600
      - source: althing_dev_node_red_mqtt_password
        target: mqtt_password
        uid: ${UID}
        mode: 0600
    user: "0" #${UID}
    volumes:
      - node-red:/data
      # If you docker cp [container hash]:/usr/src/node-red nr/src/
      # You can work with live running code by uncommenting the following volume>
      #- "./node-red:/usr/src/node-red"
  platformio:
    command: ["sh","-c","docker run --rm --name pio -t --network althing_dev_web -e CA=\"$$(cat /run/secrets/ca)\" -e MQTT_USERNAME=\"$$(cat /run/secrets/mqtt_username)\" -e MQTT_PASSWORD=\"$$(cat /run/secrets/mqtt_password)\" -e VAULT_TOKEN=\"$$(cat /run/secrets/token)\" --device /dev/ttyUSB0 allthing/platformio:${TAG}"]
    deploy:
        mode: global
        restart_policy:
          condition: on-failure
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0"
    image: docker
    networks:
      - web
    secrets:
      - source: althing_dev_ca_bundle
        target: ca
      - source: althing_dev_platformio_mqtt_username
        target: mqtt_username
      - source: althing_dev_platformio_mqtt_password
        target: mqtt_password
      - source: althing_dev_platformio_token
        target: token
    user: "0" # I suspect I'll be able to remove this. I'd like to do that. 
    volumes:
      #- ./platformio/entrypoint.py:/workspace/entrypoint.py
      - /var/run/docker.sock:/var/run/docker.sock
  portainer:
    environment:
      - stackname=althing_dev
    deploy:
      #mode: global
      replicas: 1
      restart_policy:
        condition: any
    image: allthing/portainer:${TAG}
    networks:
      - web
    ports:
      - "9000:9000"
    secrets:
      - source: althing_dev_portainer_cert_bundle
        target: cert
      - source: althing_dev_portainer_key
        target: key
      - source: althing_dev_ca_bundle
        target: ca
      - source: althing_dev_portainer_mqtt_username
        target: mqtt_username
      - source: althing_dev_portainer_mqtt_password
        target: mqtt_password
      - source: althing_dev_portainer_token
        target: token
    volumes:
      - ../portainer_old/shell-migrations:/usr/share/dogfish/shell-migrations
      - /var/run/docker.sock:/var/run/docker.sock 
      - portainer:/data
  vault:
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      - SKIP_SETCAP=true
      - VAULT_ADDR=https://vault.local:8200
      # This has been disabled because I don't think they are needed... But not sure enough to remove yet.
      #- CONTAINER_HOSTNAME=vault
      - VAULT_CACERT=/run/secrets/ca
      # This has been disabled because I don't think they are needed... But not sure enough to remove yet.
      #- VAULT_CA=true
    image: allthing/vault:${TAG}
    networks:
      web:
        aliases:
          - vault.local
          - vault.scifi.farm
    secrets:
      - source: althing_dev_vault_key
        target: /run/secrets/vault_key
      - source: althing_dev_vault_cert_bundle
        target: /run/secrets/vault_cert
      - source: althing_dev_ca_bundle
        target: /run/secrets/ca
      - source: althing_dev_ca_bundle
        target: /etc/ssl/certs/ca-certificates.crt
      - source: althing_dev_vault_unseal
        target: /run/secrets/vault_unseal
      - source: althing_dev_vault_token
        target: /run/secrets/vault_token
    ports:
      - "8200:8200"
    volumes:
      #- ./vault/data/config.hcl:/vault/config/config.hcl
      - vault:/vault/file

networks:
  web:
    attachable: true
secrets:
  althing_dev_ca:
    external: true
  althing_dev_ca_bundle:
    external: true
  althing_dev_ha_cert_bundle:
    external: true
  althing_dev_ha_key:
    external: true
  althing_dev_home_assistant_mqtt_username:
    external: true
  althing_dev_home_assistant_mqtt_password:
    external: true
  althing_dev_ha_db_cert_bundle:
    external: true
  althing_dev_ha_db_key:
    external: true
  althing_dev_mqtt_cert_bundle:
    external: true
  althing_dev_mqtt_key:
    external: true
  althing_dev_mqtt_mqtt_username:
    external: true
  althing_dev_mqtt_mqtt_password:
    external: true
  althing_dev_nr_cert_bundle:
    external: true
  althing_dev_nr_key:
    external: true
  althing_dev_platformio_mqtt_username:
    external: true
  althing_dev_platformio_mqtt_password:
    external: true
  althing_dev_platformio_token:
    external: true
  althing_dev_portainer_cert_bundle:
    external: true
  althing_dev_portainer_key:
    external: true
  althing_dev_portainer_mqtt_username:
    external: true
  althing_dev_portainer_mqtt_password:
    external: true
  althing_dev_portainer_token:
    external: true
  althing_dev_node_red_mqtt_username:
    external: true
  althing_dev_node_red_mqtt_password:
    external: true
  althing_dev_vault_cert_bundle:
    external: true
  althing_dev_vault_key:
    external: true
  althing_dev_vault_unseal:
    external: true
  althing_dev_vault_token:
    external: true
  althing_dev_docs_cert_bundle:
    external: true
  althing_dev_docs_key:
    external: true
volumes:
  home-assistant-db:
  # TODO: Implement migrations on the actual volume instead. 
  home-assistant-db-migrations:
  mqtt:
  mqtt2:
  node-red:
  portainer:
  vault:
# Can also use external per http://blog.scottlogic.com/2017/03/01/docker-secrets.html
