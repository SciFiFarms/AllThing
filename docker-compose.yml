version: '3.5'
services:
  vault:
    build:
      dockerfile: ${PWD}/vault/Dockerfile
      context: ./vault
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      - SKIP_SETCAP=true
    image: althing/vault
    networks:
      - web
    secrets:
      - source: althing_dev_vault_key
        target: /run/secrets/vault_key
      - source: althing_dev_vault_cert 
        target: /run/secrets/vault_cert
      - source: althing_dev_ca
        target: /run/secrets/ca.pem
    volumes:
      - ./vault/data/config.hcl:/vault/config/config.hcl
      - vault:/vault/file
  ha:
    build: 
      dockerfile: ${PWD}/ha/Dockerfile
      context: ./ha
      args:
        - userid=${UID}
        - username=docker
    depends_on:
      - vault
      - mqtt
      - ha_db
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    image: althing/ha
    networks:
      - web
    ports:
      - "8123:8123"
    secrets:
      - source: althing_dev_ha_cert
        target: ha_cert
        uid: ${UID}
        mode: 0440
      - source: althing_dev_ha_key
        target: ha_key
        uid: ${UID}
        mode: 0400
      - source: althing_dev_ca
        target: ca
      - source: althing_dev_ha_pem
        target: ha_pem
    user: ${UID}
    volumes:
      - ./ha/data/:/config 
  ha_db:
    build:
      dockerfile: ${PWD}/ha_db/Dockerfile
      context: ./ha_db
      args:
        - userid=${UID}
        - username=postgres
    depends_on:
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      - POSTGRES_DB=homeassistant
      - SSL_CERT_FILE=/run/secrets/ha_db_cert
      - SSL_KEY_FILE=/run/secrets/ha_db_key
      - SSL_CA_FILE=/run/secrets/ca
    image: althing/ha_db
    networks:
      - web
    secrets:
      - source: althing_dev_ha_db_pem
        target: ha_db_cert
        uid: ${UID}
        mode: 0440
      - source: althing_dev_ha_db_key
        target: ha_db_key
        uid: ${UID}
        mode: 0400
      - source: althing_dev_ca
        target: ca
    user: ${UID}
    volumes:
      - ./ha_db/data/:/var/lib/postgresql/data
  mqtt:
    depends_on:
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    image: rabbitmq:3.7.4-management
    ports:
      - "15672:15672"
      # EMQTT ports
      - "1883:1883"
      - "8083-8084:8083-8084"
      - "8883:8883"
      - "18083:18083"
      - "4369"
#      - "6000-6999"
      - "8080"
    secrets:
      - source: althing_dev_mqtt_cert
        target: mqtt_cert
      - source: althing_dev_mqtt_key
        target: mqtt_key
      - source: althing_dev_ca
        target: ca
    volumes:
        - "./mqtt/config/:/etc/rabbitmq/"
  nr:
    depends_on:
      - ha
      - mqtt
      - vault
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    image: nodered/node-red-docker 
    networks:
      - web
    ports:
      - "1880:1880"
    secrets:
      - source: althing_dev_nr_cert
        target: nr_cert
        uid: ${UID}
        mode: 0600
      - source: althing_dev_nr_key
        target: nr_key
        uid: ${UID}
        mode: 0600
    user: ${UID}
    volumes:
      - "./nr/data:/data"
networks:
  web:
secrets:
  althing_dev_ca:
    external: true
  althing_dev_ha_cert:
    external: true
  althing_dev_ha_key:
    external: true
  althing_dev_ha_pem:
    external: true
  althing_dev_ha_db_cert:
    external: true
  althing_dev_ha_db_key:
    external: true
  althing_dev_ha_db_pem:
    external: true
  althing_dev_mqtt_cert:
    external: true
  althing_dev_mqtt_key:
    external: true
  althing_dev_nr_cert:
    external: true
  althing_dev_nr_key:
    external: true
  althing_dev_vault_cert:
    external: true
  althing_dev_vault_key:
    external: true
  #mqtt-cert:
  #  file: imqtt/
volumes:
  vault:
# Can also use external per http://blog.scottlogic.com/2017/03/01/docker-secrets.html